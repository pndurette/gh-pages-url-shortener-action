name: GitHub Pages URL Shortener Action
author: Pierre Nicolas Durette
description: Ultra-lightweight GitHub Pages URL Shortener

branding:
  color: purple
  icon: link

inputs:
  urls_config:
    description: |
      The path to a YAML file associating redirect keys to URLs, e.g.:
      ```yaml
      ---
      test1: https://www.bookcity.ca/
      test2: https://www.gladdaybookshop.com
      ```
    required: false
    default: .github/urls.yml
  default_redirect:
    description: |
      Default behaviour for `/` or any 404, can be either:
        * a URL to redirect to
        * a message to display
    required: false
    default: "Nothing here!"

runs:
  using: "composite"
  steps:
    # Generate Jekyll Configuration
    # * Copy over the Jekyll _config.yml
    #   (https://jekyllrb.com/docs/configuration/)
    # * Create the _redirects/ collection directory
    #   (https://jekyllrb.com/docs/collections/)

    - shell: bash
      run: |
        # Generate Jekyll Configuration
        cp ${GITHUB_ACTION_PATH}/.github/_config.yml .
        mkdir _redirects

    # Generate Jekyll Documents
    # * Each <key>:<url> entry is generated as a Markdown document
    #   in the 'redirects' (i.e. in _redirects/) Jekyll collection
    # * Generate the front matter (https://jekyllrb.com/docs/front-matter/)
    #   using the 'redirect_to' key provided by the jekyll-redirect-from
    #   Jekyll plugin (https://github.com/jekyll/jekyll-redirect-from)

    - shell: ruby {0}
      env:
        URLS_CONFIG: ${{ inputs.urls_config }}
      run: |
        # Generate Jekyll Documents
        require 'yaml'
        begin
          urls = YAML.load_file(ENV['URLS_CONFIG'])
          urls.each do |key, url|
            puts "key: #{key}, url: #{url}"
            File.open("_redirects/#{key}.md", 'w') do |doc|
              doc << "---\n"
              doc << "redirect_to: #{url}\n"
              doc << "---\n"
            end
          end
        rescue => e
          puts "::warning::#{ENV['URLS_CONFIG']} doesn't exist or is invalid"
        end

    # Generate Jekyll Default (Redirect URL)
    # * If <default_redirect> starts with 'http', consider it a URL
    # * Generate an index Markdown redirect (like above)
    # * Generate a 404 Markdown redirect (like above)
    #   Sets permalink key to 404.html as per GitHub docs

    - shell: bash
      if: startsWith(inputs.default_redirect, 'http')
      env:
        REDIRECT_URL: ${{ inputs.default_redirect }}
      run: |
        # Generate Jekyll Default (Redirect URL)
        echo "::notice::Index/404 will redirect to ${REDIRECT_URL}"

        echo "---" > index.md
        echo "redirect_to: ${REDIRECT_URL}" >> index.md
        echo "---" >> index.md

        echo "---" > 404.md
        echo "permalink: /404.html" >> 404.md
        echo "redirect_to: ${REDIRECT_URL}" >> 404.md
        echo "---" >> 404.md

    # Generate Jekyll Default (Message)
    # * If <default_redirect> does not starts with 'http', consider it a message
    # * Generate a plain index.html with the message
    # * Generate a plain 404.html with the message

    - shell: bash
      if: "!startsWith(inputs.default_redirect, 'http')"
      env:
        MESSAGE: ${{ inputs.default_redirect }}
      run: |
        # Generate Jekyll Default (Message)
        echo "::notice::Index/404 will display '${MESSAGE}'"

        echo "${MESSAGE}" > index.html
        echo "${MESSAGE}" > 404.html

    # Build with Jekyll
    # GitHub's official Jekyll builder for GitHub Pages
    # Requires write permissions for id-token, pages

    - uses: actions/jekyll-build-pages@v1
      with:
        source: ./
        destination: ./_site

    # Show Generated URLs
    # * Builds a Markdown redirects table as job summary
    #   Uses the 'redirects.json' generated by the
    #   jekyll-redirect-from Jekyll plugin (in _site/)

    - shell: ruby {0}
      run: |
        # Show Generated URLs
        require 'json'
        generated = JSON.load(File.read('_site/redirects.json'))
        File.open(ENV['GITHUB_STEP_SUMMARY'], 'a') do |summary|
          summary << "# Generated URLs\n"
          summary << "|Key|URL|\n"
          summary << "|---|---|\n"
          generated.each do |key, url|
            summary << "|`#{key}`|#{url}|\n"
          end
        end

# Notes:
# * Each step starts with a comment ('#') to give context
#   to the run as GitHub Actions will display the 1st line
#   of a step as the 'step name' for composite Actions
# * Ruby is used because it is always pre-installed and
#   includes both YAML and JSON support in its standard library